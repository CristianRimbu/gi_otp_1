# Robot

## Point

```elixir
defmodule Point do
  def new(x, y) do
    {x, y}
  end

  def move({x, y}, :north) do
    {x, y - 1}
  end

  def move({x, y}, :south) do
    {x, y + 1}
  end

  def move({x, y}, :east) do
    {x + 1, y}
  end

  def move({x, y}, :west) do
    {x - 1, y}
  end

  def show(acc) do
    inspect(acc)
  end
end
```

```elixir
Point.new(0, 0)
|> Point.move(:north)
|> Point.move(:south)
|> Point.move(:west)
|> Point.move(:east)
|> Point.show()
```

```elixir
moves = [:north, :north, :north, :north, :east, :east, :east, :south, :south, :west]
acc = Point.new(0, 0)
reducer = fn dir, acc -> Point.move(acc, dir) end

# Enum.reduce(moves, acc, reducer)
reducer.(:north, {3, 5})
```

```elixir
Enum.reduce(1..100, 0, &(&2 + &1))
```

## Robot

```elixir
defmodule Robot do
  defstruct point: {0, 0}, orientation: :north

  def new() do
    %__MODULE__{}
  end
end
```

```elixir
Robot.new()
```
